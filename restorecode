#!/usr/bin/env bash
set -euo pipefail   # Strict mode
IFS=$'\n\t'

# Usage: restorecode <GitHub-project-name> [tag]
# Example: restorecode MyApp v1.2.3

if [[ $# -lt 1 ]]; then
  echo "Usage: $0 <GitHub-project-name> [tag]"
  exit 1
fi

# Required project name
PROJECT="$1"
shift

# Environment / path settings
OWNER="WebSurfinMurf"
BASE_DIR="${HOME}/projects"
TARGET_DIR="${BASE_DIR}/${PROJECT}"
DEFAULT_BRANCH="main"

# Ensure repo exists
if [[ ! -d "${TARGET_DIR}/.git" ]]; then
  echo "Error: Project directory '${TARGET_DIR}' does not exist." >&2
  exit 1
fi
cd "${TARGET_DIR}"

# Fetch all tags and branches
echo "‚è¨ Fetching from origin (branches & tags)‚Ä¶"
git fetch origin --tags

# Determine tag
if [[ -n "${1-}" ]]; then
  TAG="$1"
else
  # List available versions with annotation
  echo "üîç Available versions:" 
  git for-each-ref --format '%(refname:short): %(contents:subject)' refs/tags | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+:'
  echo
  # Prompt user
  echo "Enter version to restore, or 'x' to exit:" 
  read -r TAG
  if [[ "$TAG" == "x" ]]; then
    echo "‚úñÔ∏è  Aborted by user."
    exit 0
  fi
  if [[ -z "$TAG" ]]; then
    echo "‚ö†Ô∏è  No version entered; aborting."
    exit 1
  fi
fi

echo "üîß restorecode for '${PROJECT}' at ${TARGET_DIR} (tag: '${TAG}')"

# Checkout and merge
echo "üåø Checking out '${DEFAULT_BRANCH}'‚Ä¶"
git checkout "${DEFAULT_BRANCH}"

echo "üîó Fast-forward merging tag '${TAG}'‚Ä¶"
git merge --ff-only "${TAG}"

# Push the restored state
echo "üöÄ Pushing '${DEFAULT_BRANCH}' to origin‚Ä¶"
git push origin "${DEFAULT_BRANCH}"

echo "‚úÖ restorecode complete: '${DEFAULT_BRANCH}' is now at '${TAG}'"
