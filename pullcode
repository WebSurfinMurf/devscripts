#!/usr/bin/env bash
set -euo pipefail   # exit on error, undefined var, or pipeline failure

# Usage: pullcode <GitHub-project-name|all>
# Example: pullcode MyNewApp
#          pullcode all

# check for required project name
if [ $# -ne 1 ]; then
  echo "Usage: $0 <GitHub-project-name|all>"
  echo "  Use 'all' to pull all git repositories in projects directory"
  echo "Example: $0 MyNewApp"
  exit 1
fi

PROJECT="$1"
BASE_DIR="${HOME}/projects"
DEFAULT_BRANCH="main"

# Function to pull a single project
pull_single_project() {
  local project_name="$1"
  local target_dir="${BASE_DIR}/${project_name}"
  local repo_ssh="git@github.com:WebSurfinMurf/${project_name}.git"
  
  echo "🔧 pullcode for '${project_name}' → ${target_dir}"

  # Respect .nogit for single-project runs too
  if [[ -f "${target_dir}/.nogit" ]]; then
    echo "⛔ '${project_name}' is marked .nogit; skipping git pull."
    return 0
  fi

  # Add safe.directory to avoid ownership issues
  export GIT_CONFIG_COUNT=1
  export GIT_CONFIG_KEY_0="safe.directory"
  export GIT_CONFIG_VALUE_0="${target_dir}"

  if [ -d "${target_dir}/.git" ]; then
    # existing repo: pull updates
    echo "📂 Found existing repo; pulling latest on '${DEFAULT_BRANCH}'…"
    cd "${target_dir}"
    
    # Fetch with retry logic
    echo "⏬ Fetching latest changes..."
    FETCH_SUCCESS=false
    RETRY_COUNT=0
    MAX_RETRIES=3
    
    while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$FETCH_SUCCESS" = "false" ]; do
      if [ $RETRY_COUNT -gt 0 ]; then
        WAIT_TIME=$((RETRY_COUNT * 2))
        echo "   ↻ Retry $RETRY_COUNT/$MAX_RETRIES after ${WAIT_TIME}s delay..."
        sleep $WAIT_TIME
      fi
      
      timeout 7 git fetch --depth=1 origin "${DEFAULT_BRANCH}" 2>&1
      FETCH_EXIT=$?
      
      if [ $FETCH_EXIT -eq 0 ]; then
        FETCH_SUCCESS=true
      elif [ $FETCH_EXIT -eq 124 ]; then
        echo "   ⏱️  Attempt $((RETRY_COUNT + 1)) timed out after 7 seconds"
      else
        echo "   ⚠️  Attempt $((RETRY_COUNT + 1)) failed (exit code: $FETCH_EXIT)"
      fi
      
      RETRY_COUNT=$((RETRY_COUNT + 1))
    done
    
    if [ "$FETCH_SUCCESS" = "true" ]; then
      git checkout "${DEFAULT_BRANCH}"
      git reset --hard "origin/${DEFAULT_BRANCH}"
      echo "✅ Updated ${project_name} to latest ${DEFAULT_BRANCH}."
    else
      echo "⚠️  Could not fetch after $MAX_RETRIES attempts. Skipping update."
    fi
  else
    # new clone with retry logic
    echo "📂 Directory not found; cloning ${project_name} via SSH…"
    mkdir -p "${target_dir}"
    
    CLONE_SUCCESS=false
    RETRY_COUNT=0
    MAX_RETRIES=3
    
    while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$CLONE_SUCCESS" = "false" ]; do
      if [ $RETRY_COUNT -gt 0 ]; then
        WAIT_TIME=$((RETRY_COUNT * 2))
        echo "   ↻ Retry $RETRY_COUNT/$MAX_RETRIES after ${WAIT_TIME}s delay..."
        sleep $WAIT_TIME
      fi
      
      timeout 15 git clone --depth 1 --branch "${DEFAULT_BRANCH}" "${repo_ssh}" "${target_dir}" 2>&1
      CLONE_EXIT=$?
      
      if [ $CLONE_EXIT -eq 0 ]; then
        CLONE_SUCCESS=true
        echo "✅ Cloned ${project_name} into ${target_dir}."
      elif [ $CLONE_EXIT -eq 124 ]; then
        echo "   ⏱️  Clone attempt $((RETRY_COUNT + 1)) timed out after 15 seconds"
        rm -rf "${target_dir}"
      else
        echo "   ⚠️  Clone attempt $((RETRY_COUNT + 1)) failed (exit code: $CLONE_EXIT)"
        rm -rf "${target_dir}"
      fi
      
      RETRY_COUNT=$((RETRY_COUNT + 1))
    done
    
    if [ "$CLONE_SUCCESS" = "false" ]; then
      echo "⚠️  Could not clone after $MAX_RETRIES attempts."
    fi
  fi
}

# Handle 'all' parameter
if [[ "${PROJECT}" == "all" ]]; then
  echo "🔄 Processing all Git repositories in ${BASE_DIR}..."
  echo ""
  
  # Find all directories with .git subdirectory
  for dir in "${BASE_DIR}"/*/; do
    if [[ -d "${dir}/.git" ]]; then
      repo_name=$(basename "${dir}")
      echo "════════════════════════════════════════════════════════════"
      echo "📍 Processing: ${dir}"
      echo "════════════════════════════════════════════════════════════"
      
      # Call function for each repo
      pull_single_project "${repo_name}" || {
        echo "⚠️  Failed to process ${repo_name}, continuing with next..."
      }
      
      echo ""
      
      # Small delay between repos to avoid overwhelming GitHub
      if [[ -d "${BASE_DIR}"/*/.git ]]; then
        echo "   ⏸️  Pausing 2 seconds before next repository..."
        sleep 2
      fi
    fi
  done
  
  echo "✅ All repositories processed!"
  exit 0
fi

# Single project pull
pull_single_project "${PROJECT}"
