#!/usr/bin/env bash
set -euo pipefail   # exit on error, undefined var, or pipeline failure

# Usage: versioncode <GitHub-project-name> [-major|-minor] [release-description]
if [[ $# -lt 1 ]]; then
  echo "Usage: $0 <GitHub-project-name> [-major|-minor] [release-description]"
  exit 1
fi

# Required project name
PROJECT="$1"
shift

# Defaults
MODE="minor"               # default bump type
DESC="na"                  # default description

# Parse flags and description
while [[ $# -gt 0 ]]; do
  case "$1" in
    -major|--major)
      MODE="major"
      shift
      ;;
    -minor|--minor)
      MODE="minor"
      shift
      ;;
    *)
      DESC="$1"
      shift
      ;;
  esac
done

# Variables
OWNER="WebSurfinMurf"
BASE_DIR="${HOME}/projects"
TARGET_DIR="${BASE_DIR}/${PROJECT}"
REPO_SSH="git@github.com:${OWNER}/${PROJECT}.git"
DEFAULT_BRANCH="main"

# Validate MODE
if [[ "$MODE" != "major" && "$MODE" != "minor" ]]; then
  echo "Error: mode must be 'major' or 'minor'"
  exit 1
fi

echo "üîß versioncode for '${PROJECT}' at ${TARGET_DIR} (mode: ${MODE}, desc: '${DESC}')"

# Clone if missing
if [[ ! -d "${TARGET_DIR}/.git" ]]; then
  mkdir -p "$(dirname "${TARGET_DIR}")"
  git clone "${REPO_SSH}" "${TARGET_DIR}"
fi
cd "${TARGET_DIR}"

# Sync branch & tags
git fetch origin --tags
git checkout "${DEFAULT_BRANCH}"
git pull --ff-only origin "${DEFAULT_BRANCH}"

# Find latest semantic tag
latest_tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=v:refname | tail -n1 || true)
if [[ -z "$latest_tag" ]]; then
  echo "‚ö†Ô∏è  No tags found; starting at v0.0.0"
  latest_tag="v0.0.0"
fi

# Split numeric parts
ver=${latest_tag#v}
IFS='.' read -r major minor patch <<< "$ver"

# Compute new version base
if [[ "$MODE" == "major" ]]; then
  new_major=$((major+1)); new_minor=0; release_type="Major"
else
  new_major=$major; new_minor=$((minor+1)); release_type="Minor"
fi
new_patch=0

# Auto-increment patch to avoid duplicates
new_tag="v${new_major}.${new_minor}.${new_patch}"
while git rev-parse --quiet --verify "refs/tags/${new_tag}" >/dev/null; do
  new_patch=$((new_patch+1))
  new_tag="v${new_major}.${new_minor}.${new_patch}"
done

echo "üÜï ${release_type} bump: ${latest_tag} ‚Üí ${new_tag}"

# Annotated tag & push
git tag -a "${new_tag}" -m "${DESC}"
git push origin "${new_tag}"

echo "‚úÖ Created annotated tag '${new_tag}' with message: '${DESC}'"
